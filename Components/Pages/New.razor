@page "/new"
@rendermode InteractiveServer
@inject IConfiguration Config
@inject NavigationManager Navigator

<PageTitle>Task Manager - New Item</PageTitle>

<Header>
  <a href="/" class="btn btn-secondary">Back</a>
</Header>

<div class="row">
  <div class="col-lg-8 offset-lg-2">
    <Subtitle>New Item</Subtitle>
    <EditForm Model="NewItem" FormName="NewItemForm" OnSubmit="() => CreateItemAsync()"
      class="bg-light p-5 border border-1 mb-5">
      <div class="form-group">
        <label class="form-label">New Task</label> 
        <InputText @bind-Value="NewItem.Task" class="form-control mb-3" placeholder="New Task..." />
      </div>
      
      <div class="mb-3">
        <label class="form-label">Categories</label>
          @foreach (var c in NewItem.Categories)
          {
            <div class="form-group">
              <InputCheckbox @bind-Value="c.IsChecked" id="c.Value" class="form-check-input" />
              <label for="c.Value" class="form-check-label">@c.Text</label>
            </div>
          }
        </div>
      <button class="btn btn-primary">Add Task</button>
    </EditForm>
  </div>
</div>

@code {
  [SupplyParameterFromForm]
  public Item NewItem { get; set; } = new();
  private List<Category> categories = [];
  private DataService? ds;

  protected override async Task OnInitializedAsync()
  {
    ds = new(Config.GetConnectionString("default")!);
    categories = await GetCategoriesAsync();
    SetCategories();
  }

  private async Task<List<Category>> GetCategoriesAsync()
  {
    var sql = "SELECT * FROM Category";
    return await ds!.LoadData<Category, dynamic>(sql, new {});
  }

  private void SetCategories()
  {
    foreach (var category in categories)
    {
      NewItem.Categories.Add(new CheckboxItem { 
        Text = category.Name!,
        Value = category.Id,
        IsChecked = false
      });
    }
  }

  private async Task CreateItemAsync()
  {
    
    int id = new Random().Next(100000, 900000);
    var sql = "INSERT INTO Item (Id, Task, IsComplete) VALUES (@Id, @Task, @IsComplete)";
    await ds!.SaveData(sql, new { Id=id, Task=NewItem.Task, IsComplete=NewItem.IsComplete});

    foreach (var c in NewItem.Categories)
    {
      if (c.IsChecked)
      {
        await ds!.SaveData("INSERT INTO List (ItemId, CategoryId) VALUES (@ItemId, @CategoryId)", new {
          ItemId = id,
          CategoryId = c.Value
        });
      }
    }
    Navigator.NavigateTo("/");
  }
}
