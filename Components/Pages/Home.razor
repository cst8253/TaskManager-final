@page "/"
@rendermode InteractiveServer
@inject IConfiguration Config

<PageTitle>Task Manager</PageTitle>

<Header>
  <a href="/new" class="btn btn-secondary">&plus;</a>
</Header>

<div class="row">
  <div class="col-lg-8 offset-lg-2">
    <Subtitle>@Category</Subtitle>
    <select class="form-select mb-3" @bind="@Category" @bind:after="() => UpdateList()">
      @foreach (var c in categories)
      {
        <option value="@c.Name">@c.Name</option>
      }
    </select>

    <ul class="list-group mb-5">
      @foreach (var item in items)
      {
      <li class="list-group-item">
        <input type="checkbox" @bind="@item.IsComplete" @bind:after="() => UpdateItem(item.Id)" name="@item.Id" id="@item.Id" class="form-check-input" />
        <label for="" class="form-check-label">@item.Task</label>
      </li>
      }
    </ul>
  </div>
</div>

@code {
  private List<Item> items = [];
  private List<Category> categories = [];
  private DataService? ds;

  public string Category { get; set; } = "Important";

  protected override async Task OnInitializedAsync()
  {
    ds = new(Config.GetConnectionString("default")!);
    items = await GetItemsAsync();
    categories = await GetCategoriesAsync();
  }

  private async Task<List<Item>> GetItemsAsync(string category = "")
  {
    string sql;
    if (string.IsNullOrEmpty(category))
    {
      sql = "SELECT * FROM Item";
    }
    else
    {
      sql = "SELECT Item.Id as Id, Task, IsComplete FROM Item JOIN List ON Item.Id = ItemId JOIN Category ON Category.Id = CategoryId WHERE Name = @Category";
    }

    return await ds!.LoadData<Item, dynamic>(sql, new {Category = category});
  }

  private async Task<List<Category>> GetCategoriesAsync()
  {
    var sql = "SELECT * FROM Category";
    return await ds!.LoadData<Category, dynamic>(sql, new {});
  }

  private async Task UpdateList()
  {
    items = await GetItemsAsync(Category);
  }

  private async Task UpdateItem (int id)
  {
    var item = items.FirstOrDefault(i => i.Id == id);
    if (item != null)
    {
      var sql = "UPDATE Item SET IsComplete = @IsComplete WHERE Id = @Id";
      await ds!.SaveData(sql, new {Id = item.Id, IsComplete = item.IsComplete});
    }
  }
}

